# aws cloudformation delete-stack --stack-name iris-model-pipeline
# aws cloudformation create-stack --stack-name iris-model-pipeline --template-body file://build-model-pipeline.yml

Description: Create a CodePipeline for a Machine Learning Model
Parameters:
  MLOpsBucket:
    Type: String
    Description: Name of the bucket for MLOps
    Default: !Sub mlops-${AWS::Region}-${AWS::AccountId}
  RepoBranchName:
    Type: String
    Description: Name of the branch the code is located
    Default: iris_model
  ImageRepoName:
    Type: String
    Description: Name of the ECR repo without the image name
    Default: iris-model
  ImageTagName:
    Type: String
    Description: Name of the ECR image tag
    Default: latest
  ModelName:
    Type: String
    Description: Name of the model
    Default: iris-model

Resources:
  BuildImageProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Name: !Sub mlops-buildimage-${ModelName}
      Description: Build a Model Image
      ServiceRole: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOpsCodeBuild
      Artifacts:
        Type: CODEPIPELINE
      Source:
        Type: CODEPIPELINE
        BuildSpec: buildspec.yml
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: aws/codebuild/docker:17.09.0
        EnvironmentVariables:
          - Name: IMAGE_REPO_NAME
            Value:
              Ref: ImageRepoName
          - Name: IMAGE_TAG
            Value:
              Ref: ImageTagName
          - Name: AWS_ACCOUNT_ID
            Value: !Sub ${AWS::AccountId}
          - Name: AWS_DEFAULT_REGION
            Value: !Sub ${AWS::Region}
          - Name: TEMPLATE_BUCKET
            Value:
              Ref: MLOpsBucket
          - Name: TEMPLATE_PREFIX
            Value: codebuild
      Tags:
        - Key: Name
          Value: !Sub mlops-buildimage-${ModelName}
  
  MLOpsLaunchJob:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Sub mlops-job-launcher-${ModelName}
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps
      Runtime: python3.6
      Timeout: 60
      Code: 
        ZipFile: !Sub |
          import boto3
          import io
          import zipfile
          import json

          s3 = boto3.client('s3')
          sagemaker = boto3.client('sagemaker')
          cloudwatch_events = boto3.client('events')
          codepipeline = boto3.client('codepipeline')

          def lambda_handler(event, context):
              pipeline_name='mlops-${ModelName}'
              
              jobId = event["CodePipeline.job"]["id"]
              accountId = event["CodePipeline.job"]["accountId"]
              trainingJob = None
              try:
                  response = codepipeline.get_pipeline_state( name=pipeline_name )
                  executionId = response['stageStates'][0]['latestExecution']['pipelineExecutionId']
                  
                  print('Start training job for jobid[%s] executionId[%s]' % (jobId, executionId))
                  
                  for inputArtifacts in event["CodePipeline.job"]["data"]["inputArtifacts"]:
                      if inputArtifacts['name'] == 'ModelSourceOutput':
                          s3Location = inputArtifacts['location']['s3Location']
                          zip_bytes = s3.get_object(Bucket=s3Location['bucketName'], Key=s3Location['objectKey'])['Body'].read()
                          with zipfile.ZipFile(io.BytesIO(zip_bytes), "r") as z:
                              trainingJob = json.loads(z.read('assets/trainingjob.json').decode('ascii'))
                  
                  params_deploy = {
                      "Parameters": {
                          "ImageRepoName": "${ImageRepoName}",
                          "ImageTagName": "${ImageTagName}",
                          "ModelName": "${ModelName}",
                          "TrainJobId": executionId
                      }
                  }
                  for outputArtifacts in event["CodePipeline.job"]["data"]["outputArtifacts"]:
                      if outputArtifacts['name'] == 'ModelTrainOutput':
                          s3Location = outputArtifacts['location']['s3Location']
                          
                          zip_bytes = io.BytesIO()
                          with zipfile.ZipFile(zip_bytes, "w") as z:
                              z.writestr('assets/deploy-model.json', json.dumps(params_deploy))
                            
                          zip_bytes.seek(0)
                          s3.put_object(Bucket=s3Location['bucketName'], Key=s3Location['objectKey'], Body=zip_bytes.read())
              
                  if trainingJob is None:
                      raise(Exception("trainingjob.json wasn't found"))
                  
                  # launch training job
                  trainingJob['TrainingJobName'] = 'mlops-${ModelName}-%s' % executionId
                  trainingJob['Tags'].append({'Key': 'jobid', 'Value': jobId})
                  print(trainingJob)
                  sagemaker.create_training_job(**trainingJob)
                  
                  # enable monitoring event
                  cloudwatch_events.enable_rule( Name='mlops-job-monitor-${ModelName}')

                  # and update codepipeline
                  codepipeline.put_job_success_result(jobId=jobId)
              except Exception as e:
                  print(e)
                  resp = codepipeline.put_job_failure_result(
                      jobId=jobId,
                      failureDetails={
                          'type': 'ConfigurationError',
                          'message': str(e),
                          'externalExecutionId': context.aws_request_id
                      }
                  )
              return 'Done'

      Description: "Function that will start a new Sagemaker Training Job"
      Tags:
        - Key: Name
          Value: !Sub mlops-launch-job-${ModelName}
    
  MLOpsJobMonitor:
    Type: "AWS::Lambda::Function"
    Properties: 
      FunctionName: !Sub mlops-job-monitor-${ModelName}
      Handler: index.lambda_handler
      MemorySize: 512
      Role: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps
      Runtime: python3.6
      Timeout: 60
      Code: 
        ZipFile: !Sub |
          import boto3

          sagemaker = boto3.client('sagemaker')
          cloudwatch_events = boto3.client('events')
          codepipeline = boto3.client('codepipeline')

          def lambda_handler(event, context):
            pipeline_name = 'mlops-${ModelName}'
            result = None
            token = None

            try:
              response = codepipeline.get_pipeline_state( name=pipeline_name )
              executionId = response['stageStates'][0]['latestExecution']['pipelineExecutionId']
              
              # Get the approve train status token
              for stageState in response['stageStates']:
                if stageState['stageName'] == 'TrainApproval':
                  for actionState in stageState['actionStates']:
                    if actionState['actionName'] == 'ApproveTrain':
                      latestExecution = actionState['latestExecution']
                      if latestExecution['status'] != 'InProgress':
                        raise(Exception("Train approval is not awaiting for approval: %s" % latestExecution['status']))
                      token = latestExecution['token']

              if token is None:
                raise(Exception("Action token wasn't found. Aborting..."))
                  
              response = sagemaker.describe_training_job( 
                TrainingJobName='mlops-${ModelName}-%s' % executionId )
              
              status = response['TrainingJobStatus']
              print(status)
              
              if status == "Completed":
                result={
                  'summary': 'Model trained successfully',
                  'status': 'Approved'
                }
              elif status == "InProgress":
                return "Training (%s) in progress" % executionId
              else:
                result={
                  'summary': response['FailureReason'],
                  'status': 'Rejected'
                }
            except Exception as e:
              result={
                'summary': str(e),
                'status': 'Rejected'
              }
            
            codepipeline.put_approval_result(
              pipelineName=pipeline_name,
              stageName='TrainApproval',
              actionName='ApproveTrain',
              result=result,
              token=token
            )
            # disable monitoring event
            cloudwatch_events.disable_rule( Name='mlops-job-monitor-${ModelName}')
            
            return "Done"
      Description: "Function that will start a new Sagemaker Training Job"
      Tags:
        - Key: Name
          Value: !Sub mlops-job-monitor-${ModelName}
      
  MLOpsJobMonitorPermissions:
    Type: "AWS::Lambda::Permission"
    Properties: 
      Action: lambda:InvokeFunction
      FunctionName: !Sub mlops-job-monitor-${ModelName}
      Principal: events.amazonaws.com
      SourceArn: !GetAtt JobMonitoringEvent.Arn
    DependsOn: MLOpsJobMonitor

  JobMonitoringEvent:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "Event that will monitor the training job and inform codepipeline as it finishes"
      Name: !Sub mlops-job-monitor-${ModelName}
      ScheduleExpression: cron(0/1 * * * ? *)
      State: DISABLED
      Targets:
        - Arn: !Sub arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:mlops-job-monitor-${ModelName}
          Id: !Sub mlops-event-${ModelName}
    DependsOn: MLOpsJobMonitor
  
  DeployPipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub mlops-${ModelName}
      RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps
      ArtifactStore:
          Type: S3
          Location:
            Ref: MLOpsBucket
      Stages:
        -
          Name: Source
          Actions:
            -
              Name: GetSource
              ActionTypeId:
                Category: Source
                Owner: AWS
                Version: 1
                Provider: CodeCommit
              OutputArtifacts:
                -
                  Name: ModelSourceOutput
              Configuration:
                BranchName: 
                  Ref: RepoBranchName
                RepositoryName: mlops
              RunOrder: 1
        -
          Name: Build
          Actions:
            -
              Name: BuildImage
              InputArtifacts:
                - Name: ModelSourceOutput
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              OutputArtifacts:
                -
                  Name: ModelBuildOutput
              Configuration:
                  ProjectName:
                    Ref: BuildImageProject
              RunOrder: 1
        -
          Name: Train
          Actions:
            -
              Name: TrainModel
              InputArtifacts:
                - Name: ModelBuildOutput
                - Name: ModelSourceOutput
              OutputArtifacts:
                -
                  Name: ModelTrainOutput
              ActionTypeId:
                Category: Invoke
                Owner: AWS
                Version: 1
                Provider: Lambda
              Configuration:
                  FunctionName:
                    Ref: MLOpsLaunchJob
                  UserParameters: !Sub mlops-pipeline-${ModelName}
              RunOrder: 1
        -
          Name: TrainApproval
          Actions:
            -
              Name: ApproveTrain
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                  CustomData: 'Was this model trained successfully?'
              RunOrder: 1
        -
          Name: DeployDev
          Actions:
            - 
              Name: DeployModelDev
              InputArtifacts:
                - Name: ModelSourceOutput
                - Name: ModelTrainOutput
              OutputArtifacts:
                - Name: ModelDeployDevOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${AWS::StackName}-deploy-dev
                TemplateConfiguration: ModelTrainOutput::assets/deploy-model.json
                TemplatePath: ModelSourceOutput::assets/deploy-model-dev.yml
              RunOrder: 1
        -
          Name: DeployApproval
          Actions:
            -
              Name: ApproveDeploy
              ActionTypeId:
                Category: Approval
                Owner: AWS
                Version: 1
                Provider: Manual
              Configuration:
                  CustomData: 'Shall this model be put into production?'
              RunOrder: 1
        -
          Name: DeployPrd
          Actions:
            - 
              Name: DeployModelPrd
              InputArtifacts:
                - Name: ModelSourceOutput
                - Name: ModelTrainOutput
              OutputArtifacts:
                - Name: ModelDeployPrdOutput
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
                
              Configuration:
                ActionMode: CREATE_UPDATE
                RoleArn: !Sub arn:aws:iam::${AWS::AccountId}:role/MLOps
                Capabilities: CAPABILITY_NAMED_IAM
                StackName: !Sub ${AWS::StackName}-deploy-prd
                TemplateConfiguration: ModelTrainOutput::assets/deploy-model.json
                TemplatePath: ModelSourceOutput::assets/deploy-model-prd.yml
              RunOrder: 1
    DependsOn:
      MLOpsLaunchJob
